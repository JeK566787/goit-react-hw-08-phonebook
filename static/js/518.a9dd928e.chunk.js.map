{"version":3,"file":"static/js/518.a9dd928e.chunk.js","mappings":"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","sources":["components/App.styled.js","components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactsList/ContactList.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/ContactPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 400px;\n  margin: 0 auto;\n  text-align: center;\n`;\n\nexport const Message = styled.p`\n  font-size: 20px;\n  color: tomato;\n`;\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 20px;\n  font-size: 18px;\n  font-weight: 500;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 250px;\n  margin: 0 auto;\n  margin-top: 5px;\n  padding: 10px;\n  border-radius: 10px;\n  border: none;\n  border-bottom: 1px solid black;\n  outline: none;\n  background: linear-gradient(\n    0deg,\n    rgb(86 239 31 / 75%) 0%,\n    rgb(160 241 120) 38%,\n    rgba(255, 255, 255, 0.65) 100%\n  );\n`;\n\nexport const Btn = styled.button`\n  font-size: 16px;\n  font-weight: 600;\n  padding: 15px 10px;\n  border-radius: 10px;\n  border: none;\n  cursor: pointer;\n  box-shadow: 0 1px 4px rgba(84, 193, 185, 1),\n    -23px 0 20px -23px rgba(84, 193, 185, 0.8),\n    23px 0 20px -23px rgba(84, 193, 185, 0.8),\n    0 0 40px rgba(84, 193, 185, 0.1) inset;\n  outline: none;\n  background: linear-gradient(\n    0deg,\n    rgb(86 239 31 / 75%) 0%,\n    rgb(160 241 120) 38%,\n    rgba(255, 255, 255, 0.65) 100%\n  );\n`;\n","export const selectContacts = state => state.contacts.contacts;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.filter;\n","import { Label, Input, Btn } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n    const name = e.target.elements.name.value;\n    const number = e.target.elements.number.value;\n    const checkContact = contacts.find(contact => contact.name === name);\n    if (checkContact) {\n      alert('Already in Contacts');\n      return;\n    }\n    const newContact = {\n      name: name,\n      number: number,\n      id: nanoid(),\n    };\n\n    dispatch(addContact(newContact));\n    e.target.reset();\n  };\n\n  return (\n    <form onSubmit={onFormSubmit}>\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n\n      <Btn type=\"submit\">Add contact</Btn>\n    </form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  width: 400px;\n  list-style: none;\n  padding: 20px 0;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  border-radius: 20px;\n  background: #a0f399;\n`;\n\nexport const Btn = styled.button`\n  display: block;\n  font-size: 14px;\n  font-weight: 500;\n  padding: 5px 5px;\n  border-radius: 5px;\n  border: none;\n  cursor: pointer;\n  box-shadow: 0 1px 4px rgba(84, 193, 185, 1),\n    -23px 0 20px -23px rgba(84, 193, 185, 0.8),\n    23px 0 20px -23px rgba(84, 193, 185, 0.8),\n    0 0 40px rgba(84, 193, 185, 0.1) inset;\n  outline: none;\n  background: linear-gradient(\n    0deg,\n    rgb(86 239 31 / 75%) 0%,\n    rgb(160 241 120) 38%,\n    rgba(255, 255, 255, 0.65) 100%\n  );\n`;\nexport const Li = styled.li`\n  padding: 0 10px;\n  display: flex;\n  gap: 20px;\n  align-items: center;\n`;\n","import { Ul, Li, Btn } from './ContactList.styled';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const setFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  return (\n    <Ul>\n      {setFilteredContacts().map(({ number, name, id }) => (\n        <Li key={id}>\n          {name}: {number}\n          <Btn type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            Delete\n          </Btn>\n        </Li>\n      ))}\n    </Ul>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 20px;\n  font-size: 18px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 250px;\n  margin: 0 auto;\n  margin-top: 5px;\n  padding: 10px;\n  border-radius: 10px;\n  border: none;\n  border-bottom: 1px solid black;\n  outline: none;\n  background: #a0f399;\n  &:focus {\n    background: #e6fffa;\n  }\n`;\n","import { Label, Input } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux/es/exports';\nimport { filterContacts } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        name=\"filter\"\n        type=\"text\"\n        value={filter}\n        onChange={e => dispatch(filterContacts(e.target.value))}\n      />\n    </Label>\n  );\n};\n","import { Container, Message } from 'components/App.styled';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport Loader from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectLoading,\n} from 'redux/contacts/selectors';\n\nconst ContactPage = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n  const isLoggedIn = useSelector(state => state.auth.isLoggedIn);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoggedIn && (\n        <Container>\n          <h1>Phonebook</h1>\n          <ContactForm />\n          {contacts.length > 0 ? (\n            <>\n              {/* <h2>Contacts</h2> */}\n              <Filter />\n              <ContactsList />\n            </>\n          ) : (\n            <Message>Contacts list is empty yet</Message>\n          )}\n          {isLoading && <Loader />}\n          {error && <h1>{error}</h1>}\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default ContactPage;\n"],"names":["Container","styled","Message","Label","Input","Btn","selectContacts","state","contacts","selectLoading","isLoading","selectError","error","selectFilter","filter","ContactForm","dispatch","useDispatch","useSelector","onSubmit","e","preventDefault","name","target","elements","value","number","find","contact","alert","newContact","id","nanoid","addContact","reset","type","pattern","title","required","Ul","Li","ContactsList","toLowerCase","includes","map","onClick","deleteContact","Filter","onChange","filterContacts","isLoggedIn","auth","useEffect","fetchContacts","length","Loader"],"sourceRoot":""}